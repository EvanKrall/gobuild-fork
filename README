Description
------------
gobuild is an automatic build tool that aims to replace Makefiles for simple
projects written in the Go programming language. It creates a dependency graph
of all local imports and compiles them in the right order using the gc Go
compiler.


Compiling
----------

> 6g gobuild.go && 6l -o gobuild gobuild.6

Replace 6 with whatever your architecture is (6 = AMD64, 8 = 386, 5 = arm).

If you have an older version of gobuild, running gobuild without parameters
inside the source code directory should be enough.


Usage
------

There are currently three different use cases for gobuild.

1) One main function with one or more file in the main package:
   
   > gobuild

2) Several main functions in different files with each file of the main
   package belonging to a different executable:

   > gobuild mainfile.go

3) Several main functions in different files and some additional files in the
   main package that are shared by some/all the executables:

   > gobuild --multiple-main mainfile.go

For gobuild to work correctly you have to import all local packages with their
path, e.g. import "./mypackage";. All files for this package should be placed
inside a directory called "mypackage", but it also works if they are in the
root directory. For packages with a deeper directory structure the correct path
is required though.


Parameters
-----------

> gobuild [options] [gofile(s)]
> gobuild -lib [options] [gopackage(s)]

 gofile(s)
        For building an executable you can give one or more go-file names
        that must have a main function inside. The resulting executable will
        be called after the filename, but without extension.
        This parameter is optional if there's only one main file or the
        parameter -a is given.
        
 gopackage(s)
        If building a library you can give a list of packages that should
        be build. Only those packages will be build into libraries.

 -a
        Build all executables.

 -clean
        Deletes all temporary files. Files are the same as "make clean" and
        it is possible that this will delete important files if called inside
        the wrong directory.

 -include-hidden
        Include files in hidden directories and hidden files.

 -lib
        Build all packages, excluding the main package, into library files.
       
 -o filename/dir
        This parameter can either have a filename or a directory as parameter.
        File names only work for executables while directories will also work
        when building librarys.
        If building an executable without giving an output file name the default
        name will be the same as the Go file name but without extension.
 
 -q
        Quiet mode, only print warnings and errors.

 -qq
        Quieter mode, only print errors.

 -single-main
        Don't include files from the main package without main function to
        the one with main function when compiling.

 -v
        Verbose mode, print debug messages.

